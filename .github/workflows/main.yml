name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REPOSITORY: identity-service
  AWS_REGION: ap-southeast-1
  EC2_HOST: 54.251.203.73
  GO_VERSION: 1.21

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Initialize Go Module
        run: |
          if [ ! -f go.mod ]; then
            go mod init identity-service
            go mod tidy
          fi

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          only-new-issues: true
          skip-cache: true

      - name: Run linting
        run: |
          golangci-lint run ./... --out-format=colored-line-number || echo "Linting issues found but continuing..."

      - name: Download dependencies
        run: go mod download
          
      - name: Run tests
        run: |
          mkdir -p test-results
          go test -v -race -coverprofile=coverage.out ./... 2>&1 | tee test-results/test.log || true
          if [ -f coverage.out ]; then
            go tool cover -func=coverage.out | tee test-results/coverage.txt
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
            echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            coverage.out
          retention-days: 7

      - name: Check coverage threshold
        run: |
          if [ ! -z "$COVERAGE" ] && [ $(echo "$COVERAGE < 50" | bc -l) -eq 1 ]; then
            echo "Warning: Code coverage ($COVERAGE%) is below 50%"
          fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          IMAGE_TAG: ${{ github.sha }}
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_HOST }} "\
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }} && \
            docker pull ${{ secrets.ECR_REPOSITORY_URL }}:$IMAGE_TAG && \
            docker stop identity-service || true && \
            docker rm identity-service || true && \
            docker run -d \
              --name identity-service \
              -p 4000:4000 \
              --restart unless-stopped \
              ${{ secrets.ECR_REPOSITORY_URL }}:$IMAGE_TAG" 
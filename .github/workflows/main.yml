name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REPOSITORY: identity-service
  AWS_REGION: ap-southeast-1
  EC2_HOST: 54.251.203.73
  GO_VERSION: 1.21

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Initialize Go Module (if needed)
        run: |
          test -f go.mod || go mod init identity-service

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          only-new-issues: true 

      - name: Run linting
        run: |
          golangci-lint run ./... --out-format=colored-line-number || echo "Linting issues found but continuing..."

      - name: Run tests
        run: |
          mkdir -p test-results
          go test -v -race -coverprofile=coverage.out ./... 2>&1 | tee test-results/test.log
          go tool cover -func=coverage.out | tee test-results/coverage.txt
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            coverage.out
          retention-days: 7

      - name: Check coverage threshold
        if: env.COVERAGE < 50
        run: |
          echo "Warning: Code coverage (${{ env.COVERAGE }}%) is below 50%"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          IMAGE_TAG: ${{ github.sha }}
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_HOST }} "
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $REGISTRY;
            docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG;
            docker stop $REPOSITORY || true;
            docker rm $REPOSITORY || true;
            docker run -d \
              --name $REPOSITORY \
              -p 4000:4000 \
              --health-cmd='curl -f http://localhost:4000/health || exit 1' \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=5s \
              --restart unless-stopped \
              $REGISTRY/$REPOSITORY:$IMAGE_TAG;
            echo 'Waiting for container health check...';
            timeout 30s bash -c 'while [[ \"$(docker inspect --format='{{.State.Health.Status}}' $REPOSITORY)\" != \"healthy\" ]]; do echo -n '.' && sleep 2; done';
            echo 'Container is healthy' || (echo 'Container failed health check' && docker logs $REPOSITORY && exit 1)
          "